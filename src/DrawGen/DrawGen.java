/*
 *  (c) Copyright 2016 Dougal Seeley.  All rights reserved.
 */
package DrawGen;

import DrawGen.Draw.*;
import DrawGen.Draw.DrawHieararchy.*;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.LinkedHashMap;
import javax.print.*;
import javax.print.attribute.*;
import javax.print.attribute.standard.*;
import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JTextArea;
import javax.swing.RepaintManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.plaf.basic.BasicComboBoxUI;
import javax.swing.plaf.basic.BasicComboPopup;
import javax.swing.plaf.basic.ComboPopup;

/**
 */
public class DrawGen extends javax.swing.JFrame
{
    private final AutoDrawMgr autoDrawMgr = new AutoDrawMgr();
    private final ManualDrawMgr manualDrawMgr = new ManualDrawMgr();

    private ActiveDraw activeDraw = new ActiveDraw(null);

    private int scalePercent = 100;
    private final DocFlavor myDocFlavor = DocFlavor.SERVICE_FORMATTED.PRINTABLE;
    private final PrintRequestAttributeSet printReqattrs = new HashPrintRequestAttributeSet();
    private PrintService myPrintService;

    public DrawGen()
    {
        /* Set the Frame's icon */
        Image CurImg = Toolkit.getDefaultToolkit().getImage(DrawGen.class.getResource("/DrawGen/resources/DrawGen_AppIcon.png"));
        this.setIconImage(CurImg);

        /*Init the netbeans-generated components*/
        initComponents();

        autoDrawMgr.resetAll();
        manualDrawMgr.resetAll();

        this.myPrintService = PrintServiceLookup.lookupDefaultPrintService();
        if (this.myPrintService != null)
        {
            this.configDefaultPrintServices();
        }
        else
        {
            System.out.println("No default print service.");
//            JOptionPane.showMessageDialog(this, "No default printer set (therefore no default print settings).  Print preview disabled.");
//            this.jMenuItemPrintPreview.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        buttonGroupDisciplineAuto = new javax.swing.ButtonGroup();
        buttonGroupDisciplineManual = new javax.swing.ButtonGroup();
        buttonGroupGoverningBody = new javax.swing.ButtonGroup();
        buttonGroupCategoryBPA4WayFS = new javax.swing.ButtonGroup();
        buttonGroupCategoryBPA8WayFS = new javax.swing.ButtonGroup();
        buttonGroupCategoryBPA4WayVFS = new javax.swing.ButtonGroup();
        buttonGroupCategoryUSPA4WayFS = new javax.swing.ButtonGroup();
        buttonGroupCategoryUSPA8WayFS = new javax.swing.ButtonGroup();
        buttonGroupCategoryUSPA4WayVFS = new javax.swing.ButtonGroup();
        jPopupMenuGenerateAuto = new javax.swing.JPopupMenu();
        jMenuItemGenerateAutoCurrent = new javax.swing.JMenuItem();
        jMenuItemGenerateAutoAllNoSubstitution = new javax.swing.JMenuItem();
        jMenuItemGenerateAutoAllSubstitution = new javax.swing.JMenuItem();
        jToolBar1 = new javax.swing.JToolBar();
        jLabelZoom = new javax.swing.JLabel();
        jComboBoxZoom = new javax.swing.JComboBox();
        mainPanel = new javax.swing.JPanel();
        jTabbedPaneSelect = new javax.swing.JTabbedPane();
        jPanelTabAutomatic = new javax.swing.JPanel();
        jPanelDisciplineAuto = new javax.swing.JPanel();
        jRadioDisciplineAuto4WayFS = new javax.swing.JRadioButton();
        jRadioDisciplineAuto8WayFS = new javax.swing.JRadioButton();
        jRadioDisciplineAuto4WayVFS = new javax.swing.JRadioButton();
        jPanelGoverningBody = new javax.swing.JPanel();
        jRadioGovBodyBPA = new javax.swing.JRadioButton();
        jRadioGovBodyUSPA = new javax.swing.JRadioButton();
        jRadioGovBodyIPC = new javax.swing.JRadioButton();
        jPanelCategory = new javax.swing.JPanel();
        jPanelBPA4WayFS = new javax.swing.JPanel();
        jRadioBPA4WayFSAAA = new javax.swing.JRadioButton();
        jRadioBPA4WayFSAA = new javax.swing.JRadioButton();
        jRadioBPA4WayFSA = new javax.swing.JRadioButton();
        jRadioBPA4WayFSRookies = new javax.swing.JRadioButton();
        jPanelBPA8WayFS = new javax.swing.JPanel();
        jRadioBPA8WayFSSenior = new javax.swing.JRadioButton();
        jRadioBPA8WayFSIntermediate = new javax.swing.JRadioButton();
        jPanelBPA4WayVFS = new javax.swing.JPanel();
        jRadioBPA4WayVFSOpen = new javax.swing.JRadioButton();
        jPanelUSPA4WayFS = new javax.swing.JPanel();
        jRadioUSPA4WayFSOpen = new javax.swing.JRadioButton();
        jRadioUSPA4WayFSAdvanced = new javax.swing.JRadioButton();
        jRadioUSPA4WayFSIntermediate = new javax.swing.JRadioButton();
        jPanelUSPA8WayFS = new javax.swing.JPanel();
        jRadioUSPA8WayFSOpen = new javax.swing.JRadioButton();
        jRadioUSPA8WayFSIntermediate = new javax.swing.JRadioButton();
        jPanelUSPAVFS = new javax.swing.JPanel();
        jRadioUSPA4WayVFSOpen = new javax.swing.JRadioButton();
        jRadioUSPA4WayVFSAdvanced = new javax.swing.JRadioButton();
        jButtonGenerateAuto = new javax.swing.JButton();
        jPanelTabManual = new javax.swing.JPanel();
        jPanelDisciplineManual = new javax.swing.JPanel();
        jRadioDisciplineManual4WayFS = new javax.swing.JRadioButton();
        jRadioDisciplineManual8WayFS = new javax.swing.JRadioButton();
        jRadioDisciplineManual4WayVFS = new javax.swing.JRadioButton();
        jScrollPaneManual = new javax.swing.JScrollPane();
        jTextAreaManual = new TextAreaManual();
        jButtonManualInputClear = new javax.swing.JButton();
        jButtonGenerateManual = new javax.swing.JButton();
        jPanelPrepopulate = new javax.swing.JPanel();
        jComboBoxPrepopulate = new javax.swing.JComboBox<>();
        jComboBoxPrepopulate.setUI(new StyledComboBoxUI());
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        jTabbedPaneOutput = new javax.swing.JTabbedPane();
        jScrollPanePictureOutput = new javax.swing.JScrollPane();
        jPanelPictureOutput = new cjPanelPictureOutput();
        jTextAreaTextOutput = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jMenuItemPageSetup = new javax.swing.JMenuItem();
        jMenuItemPrint = new javax.swing.JMenuItem();
        jMenuItemPrintPreview = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItemResetAll = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItemExit = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        jMenuItemAbout = new javax.swing.JMenuItem();

        jMenuItemGenerateAutoCurrent.setText("Generate selected category");
        jMenuItemGenerateAutoCurrent.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemGenerateAutoCurrentActionPerformed(evt);
            }
        });
        jPopupMenuGenerateAuto.add(jMenuItemGenerateAutoCurrent);

        jMenuItemGenerateAutoAllNoSubstitution.setText("Generate all categories in discipline randomly");
        jMenuItemGenerateAutoAllNoSubstitution.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemGenerateAutoAllNoSubstitutionActionPerformed(evt);
            }
        });
        jPopupMenuGenerateAuto.add(jMenuItemGenerateAutoAllNoSubstitution);

        jMenuItemGenerateAutoAllSubstitution.setText("Generate all categories in discipline via hierarchical substitution");
        jMenuItemGenerateAutoAllSubstitution.setToolTipText("");
        jMenuItemGenerateAutoAllSubstitution.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemGenerateAutoAllSubstitutionActionPerformed(evt);
            }
        });
        jPopupMenuGenerateAuto.add(jMenuItemGenerateAutoAllSubstitution);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DrawGen");

        jToolBar1.setRollover(true);
        jToolBar1.setFont(jToolBar1.getFont());

        jLabelZoom.setText("Zoom: ");
        jLabelZoom.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToolBar1.add(jLabelZoom);

        jComboBoxZoom.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "200%", "150%", "100%", "75%", "50%" }));
        jComboBoxZoom.setSelectedIndex(2);
        jComboBoxZoom.setToolTipText("");
        jComboBoxZoom.setMaximumSize(new java.awt.Dimension(83, 26));
        jComboBoxZoom.setPreferredSize(new java.awt.Dimension(83, 26));
        jComboBoxZoom.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jComboBoxZoomActionPerformed(evt);
            }
        });
        jToolBar1.add(jComboBoxZoom);

        jTabbedPaneSelect.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                jTabbedPaneSelectStateChanged(evt);
            }
        });

        jPanelDisciplineAuto.setBorder(javax.swing.BorderFactory.createTitledBorder("Discipline"));
        jPanelDisciplineAuto.setPreferredSize(new java.awt.Dimension(99, 111));

        buttonGroupDisciplineAuto.add(jRadioDisciplineAuto4WayFS);
        jRadioDisciplineAuto4WayFS.setText("4-Way FS");
        jRadioDisciplineAuto4WayFS.setToolTipText("4-Way Forrmation Skydiving");
        jRadioDisciplineAuto4WayFS.setName("FOURWAYFS"); // NOI18N
        jRadioDisciplineAuto4WayFS.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                jRadioDisciplineAutoItemStateChanged(evt);
            }
        });

        buttonGroupDisciplineAuto.add(jRadioDisciplineAuto8WayFS);
        jRadioDisciplineAuto8WayFS.setText("8-Way FS");
        jRadioDisciplineAuto8WayFS.setToolTipText("8-Way Forrmation Skydiving");
        jRadioDisciplineAuto8WayFS.setName("EIGHTWAYFS"); // NOI18N
        jRadioDisciplineAuto8WayFS.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                jRadioDisciplineAutoItemStateChanged(evt);
            }
        });

        buttonGroupDisciplineAuto.add(jRadioDisciplineAuto4WayVFS);
        jRadioDisciplineAuto4WayVFS.setText("4-Way VFS");
        jRadioDisciplineAuto4WayVFS.setToolTipText("4-Way Vertical Forrmation Skydiving");
        jRadioDisciplineAuto4WayVFS.setName("FOURWAYVFS"); // NOI18N
        jRadioDisciplineAuto4WayVFS.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                jRadioDisciplineAutoItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelDisciplineAutoLayout = new javax.swing.GroupLayout(jPanelDisciplineAuto);
        jPanelDisciplineAuto.setLayout(jPanelDisciplineAutoLayout);
        jPanelDisciplineAutoLayout.setHorizontalGroup(
            jPanelDisciplineAutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDisciplineAutoLayout.createSequentialGroup()
                .addGroup(jPanelDisciplineAutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioDisciplineAuto4WayFS)
                    .addComponent(jRadioDisciplineAuto4WayVFS)
                    .addComponent(jRadioDisciplineAuto8WayFS))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanelDisciplineAutoLayout.setVerticalGroup(
            jPanelDisciplineAutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDisciplineAutoLayout.createSequentialGroup()
                .addComponent(jRadioDisciplineAuto4WayFS)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioDisciplineAuto8WayFS)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioDisciplineAuto4WayVFS))
        );

        jPanelGoverningBody.setBorder(javax.swing.BorderFactory.createTitledBorder("Governing Body"));
        jPanelGoverningBody.setPreferredSize(new java.awt.Dimension(118, 90));

        buttonGroupGoverningBody.add(jRadioGovBodyBPA);
        jRadioGovBodyBPA.setText("BPA");
        jRadioGovBodyBPA.setName("BPA"); // NOI18N
        jRadioGovBodyBPA.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                jRadioGovBodyItemStateChanged(evt);
            }
        });

        buttonGroupGoverningBody.add(jRadioGovBodyUSPA);
        jRadioGovBodyUSPA.setText("USPA");
        jRadioGovBodyUSPA.setName("USPA"); // NOI18N
        jRadioGovBodyUSPA.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                jRadioGovBodyItemStateChanged(evt);
            }
        });

        buttonGroupGoverningBody.add(jRadioGovBodyIPC);
        jRadioGovBodyIPC.setText("IPC");
        jRadioGovBodyIPC.setName("IPC"); // NOI18N
        jRadioGovBodyIPC.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                jRadioGovBodyItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelGoverningBodyLayout = new javax.swing.GroupLayout(jPanelGoverningBody);
        jPanelGoverningBody.setLayout(jPanelGoverningBodyLayout);
        jPanelGoverningBodyLayout.setHorizontalGroup(
            jPanelGoverningBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGoverningBodyLayout.createSequentialGroup()
                .addGroup(jPanelGoverningBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioGovBodyUSPA)
                    .addComponent(jRadioGovBodyBPA)
                    .addComponent(jRadioGovBodyIPC))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanelGoverningBodyLayout.setVerticalGroup(
            jPanelGoverningBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelGoverningBodyLayout.createSequentialGroup()
                .addComponent(jRadioGovBodyBPA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioGovBodyUSPA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioGovBodyIPC))
        );

        jPanelCategory.setBorder(javax.swing.BorderFactory.createTitledBorder("Category"));
        jPanelCategory.setVisible(false);
        jPanelCategory.setLayout(new java.awt.CardLayout());

        jPanelBPA4WayFS.setName("CategoryBPA4WayFS"); // NOI18N
        jPanelBPA4WayFS.setPreferredSize(new java.awt.Dimension(86, 140));

        buttonGroupCategoryBPA4WayFS.add(jRadioBPA4WayFSAAA);
        jRadioBPA4WayFSAAA.setText("AAA");
        jRadioBPA4WayFSAAA.setName("AAA"); // NOI18N
        jRadioBPA4WayFSAAA.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                jRadioCategoryStateChanged(evt);
            }
        });

        buttonGroupCategoryBPA4WayFS.add(jRadioBPA4WayFSAA);
        jRadioBPA4WayFSAA.setText("AA");
        jRadioBPA4WayFSAA.setName("AA"); // NOI18N
        jRadioBPA4WayFSAA.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                jRadioCategoryStateChanged(evt);
            }
        });

        buttonGroupCategoryBPA4WayFS.add(jRadioBPA4WayFSA);
        jRadioBPA4WayFSA.setText("A");
        jRadioBPA4WayFSA.setName("A"); // NOI18N
        jRadioBPA4WayFSA.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                jRadioCategoryStateChanged(evt);
            }
        });

        buttonGroupCategoryBPA4WayFS.add(jRadioBPA4WayFSRookies);
        jRadioBPA4WayFSRookies.setText("Rookies");
        jRadioBPA4WayFSRookies.setName("ROOKIES"); // NOI18N
        jRadioBPA4WayFSRookies.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                jRadioCategoryStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelBPA4WayFSLayout = new javax.swing.GroupLayout(jPanelBPA4WayFS);
        jPanelBPA4WayFS.setLayout(jPanelBPA4WayFSLayout);
        jPanelBPA4WayFSLayout.setHorizontalGroup(
            jPanelBPA4WayFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jRadioBPA4WayFSAAA)
            .addComponent(jRadioBPA4WayFSAA)
            .addComponent(jRadioBPA4WayFSA)
            .addComponent(jRadioBPA4WayFSRookies)
        );
        jPanelBPA4WayFSLayout.setVerticalGroup(
            jPanelBPA4WayFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBPA4WayFSLayout.createSequentialGroup()
                .addComponent(jRadioBPA4WayFSAAA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioBPA4WayFSAA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioBPA4WayFSA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioBPA4WayFSRookies))
        );

        jPanelCategory.add(jPanelBPA4WayFS, "CategoryBPA4WayFS");

        jPanelBPA8WayFS.setName("CategoryBPA8WayFS"); // NOI18N
        jPanelBPA8WayFS.setPreferredSize(new java.awt.Dimension(118, 90));

        buttonGroupCategoryBPA8WayFS.add(jRadioBPA8WayFSSenior);
        jRadioBPA8WayFSSenior.setText("Senior");
        jRadioBPA8WayFSSenior.setName("SENIOR"); // NOI18N
        jRadioBPA8WayFSSenior.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                jRadioCategoryStateChanged(evt);
            }
        });

        buttonGroupCategoryBPA8WayFS.add(jRadioBPA8WayFSIntermediate);
        jRadioBPA8WayFSIntermediate.setText("Intermediate");
        jRadioBPA8WayFSIntermediate.setName("INTERMEDIATE"); // NOI18N
        jRadioBPA8WayFSIntermediate.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                jRadioCategoryStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelBPA8WayFSLayout = new javax.swing.GroupLayout(jPanelBPA8WayFS);
        jPanelBPA8WayFS.setLayout(jPanelBPA8WayFSLayout);
        jPanelBPA8WayFSLayout.setHorizontalGroup(
            jPanelBPA8WayFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBPA8WayFSLayout.createSequentialGroup()
                .addGroup(jPanelBPA8WayFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioBPA8WayFSSenior)
                    .addComponent(jRadioBPA8WayFSIntermediate))
                .addGap(17, 17, 17))
        );
        jPanelBPA8WayFSLayout.setVerticalGroup(
            jPanelBPA8WayFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBPA8WayFSLayout.createSequentialGroup()
                .addComponent(jRadioBPA8WayFSSenior)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioBPA8WayFSIntermediate)
                .addContainerGap())
        );

        jPanelCategory.add(jPanelBPA8WayFS, "CategoryBPA8WayFS");

        jPanelBPA4WayVFS.setName("CategoryBPA4WayVFS"); // NOI18N
        jPanelBPA4WayVFS.setPreferredSize(new java.awt.Dimension(86, 140));

        buttonGroupCategoryBPA4WayVFS.add(jRadioBPA4WayVFSOpen);
        jRadioBPA4WayVFSOpen.setSelected(true);
        jRadioBPA4WayVFSOpen.setText("Open");
        jRadioBPA4WayVFSOpen.setName("OPEN"); // NOI18N
        jRadioBPA4WayVFSOpen.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                jRadioCategoryStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelBPA4WayVFSLayout = new javax.swing.GroupLayout(jPanelBPA4WayVFS);
        jPanelBPA4WayVFS.setLayout(jPanelBPA4WayVFSLayout);
        jPanelBPA4WayVFSLayout.setHorizontalGroup(
            jPanelBPA4WayVFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBPA4WayVFSLayout.createSequentialGroup()
                .addComponent(jRadioBPA4WayVFSOpen)
                .addGap(69, 69, 69))
        );
        jPanelBPA4WayVFSLayout.setVerticalGroup(
            jPanelBPA4WayVFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBPA4WayVFSLayout.createSequentialGroup()
                .addComponent(jRadioBPA4WayVFSOpen)
                .addContainerGap())
        );

        jPanelCategory.add(jPanelBPA4WayVFS, "CategoryBPA4WayVFS");

        jPanelUSPA4WayFS.setName("CategoryUSPA4WayFS"); // NOI18N
        jPanelUSPA4WayFS.setPreferredSize(new java.awt.Dimension(86, 140));

        buttonGroupCategoryUSPA4WayFS.add(jRadioUSPA4WayFSOpen);
        jRadioUSPA4WayFSOpen.setText("Open");
        jRadioUSPA4WayFSOpen.setName("OPEN"); // NOI18N
        jRadioUSPA4WayFSOpen.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                jRadioCategoryStateChanged(evt);
            }
        });

        buttonGroupCategoryUSPA4WayFS.add(jRadioUSPA4WayFSAdvanced);
        jRadioUSPA4WayFSAdvanced.setText("Advanced");
        jRadioUSPA4WayFSAdvanced.setName("ADVANCED"); // NOI18N
        jRadioUSPA4WayFSAdvanced.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                jRadioCategoryStateChanged(evt);
            }
        });

        buttonGroupCategoryUSPA4WayFS.add(jRadioUSPA4WayFSIntermediate);
        jRadioUSPA4WayFSIntermediate.setText("Intermediate");
        jRadioUSPA4WayFSIntermediate.setToolTipText("");
        jRadioUSPA4WayFSIntermediate.setName("INTERMEDIATE"); // NOI18N
        jRadioUSPA4WayFSIntermediate.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                jRadioCategoryStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelUSPA4WayFSLayout = new javax.swing.GroupLayout(jPanelUSPA4WayFS);
        jPanelUSPA4WayFS.setLayout(jPanelUSPA4WayFSLayout);
        jPanelUSPA4WayFSLayout.setHorizontalGroup(
            jPanelUSPA4WayFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jRadioUSPA4WayFSAdvanced, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jRadioUSPA4WayFSIntermediate, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
            .addComponent(jRadioUSPA4WayFSOpen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanelUSPA4WayFSLayout.setVerticalGroup(
            jPanelUSPA4WayFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUSPA4WayFSLayout.createSequentialGroup()
                .addComponent(jRadioUSPA4WayFSOpen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioUSPA4WayFSAdvanced)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioUSPA4WayFSIntermediate)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        jPanelCategory.add(jPanelUSPA4WayFS, "CategoryUSPA4WayFS");

        jPanelUSPA8WayFS.setName("CategoryUSPA8WayFS"); // NOI18N
        jPanelUSPA8WayFS.setPreferredSize(new java.awt.Dimension(118, 90));

        buttonGroupCategoryUSPA8WayFS.add(jRadioUSPA8WayFSOpen);
        jRadioUSPA8WayFSOpen.setText("Open");
        jRadioUSPA8WayFSOpen.setName("OPEN"); // NOI18N
        jRadioUSPA8WayFSOpen.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                jRadioCategoryStateChanged(evt);
            }
        });

        buttonGroupCategoryUSPA8WayFS.add(jRadioUSPA8WayFSIntermediate);
        jRadioUSPA8WayFSIntermediate.setText("Intermediate");
        jRadioUSPA8WayFSIntermediate.setName("INTERMEDIATE"); // NOI18N
        jRadioUSPA8WayFSIntermediate.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                jRadioCategoryStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelUSPA8WayFSLayout = new javax.swing.GroupLayout(jPanelUSPA8WayFS);
        jPanelUSPA8WayFS.setLayout(jPanelUSPA8WayFSLayout);
        jPanelUSPA8WayFSLayout.setHorizontalGroup(
            jPanelUSPA8WayFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUSPA8WayFSLayout.createSequentialGroup()
                .addGroup(jPanelUSPA8WayFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioUSPA8WayFSIntermediate)
                    .addComponent(jRadioUSPA8WayFSOpen))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanelUSPA8WayFSLayout.setVerticalGroup(
            jPanelUSPA8WayFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelUSPA8WayFSLayout.createSequentialGroup()
                .addComponent(jRadioUSPA8WayFSOpen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioUSPA8WayFSIntermediate))
        );

        jPanelCategory.add(jPanelUSPA8WayFS, "CategoryUSPA8WayFS");

        jPanelUSPAVFS.setName("CategoryUSPA4WayVFS"); // NOI18N
        jPanelUSPAVFS.setPreferredSize(new java.awt.Dimension(86, 140));

        buttonGroupCategoryUSPA4WayVFS.add(jRadioUSPA4WayVFSOpen);
        jRadioUSPA4WayVFSOpen.setText("Open");
        jRadioUSPA4WayVFSOpen.setName("OPEN"); // NOI18N
        jRadioUSPA4WayVFSOpen.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                jRadioCategoryStateChanged(evt);
            }
        });

        buttonGroupCategoryUSPA4WayVFS.add(jRadioUSPA4WayVFSAdvanced);
        jRadioUSPA4WayVFSAdvanced.setText("Advanced");
        jRadioUSPA4WayVFSAdvanced.setToolTipText("");
        jRadioUSPA4WayVFSAdvanced.setName("ADVANCED"); // NOI18N
        jRadioUSPA4WayVFSAdvanced.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                jRadioCategoryStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelUSPAVFSLayout = new javax.swing.GroupLayout(jPanelUSPAVFS);
        jPanelUSPAVFS.setLayout(jPanelUSPAVFSLayout);
        jPanelUSPAVFSLayout.setHorizontalGroup(
            jPanelUSPAVFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUSPAVFSLayout.createSequentialGroup()
                .addGroup(jPanelUSPAVFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioUSPA4WayVFSOpen)
                    .addComponent(jRadioUSPA4WayVFSAdvanced))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelUSPAVFSLayout.setVerticalGroup(
            jPanelUSPAVFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUSPAVFSLayout.createSequentialGroup()
                .addComponent(jRadioUSPA4WayVFSOpen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioUSPA4WayVFSAdvanced))
        );

        jPanelCategory.add(jPanelUSPAVFS, "CategoryUSPA4WayVFS");

        jButtonGenerateAuto.setText("Generate");
        jButtonGenerateAuto.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonGenerateAutoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelTabAutomaticLayout = new javax.swing.GroupLayout(jPanelTabAutomatic);
        jPanelTabAutomatic.setLayout(jPanelTabAutomaticLayout);
        jPanelTabAutomaticLayout.setHorizontalGroup(
            jPanelTabAutomaticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelGoverningBody, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
            .addComponent(jPanelDisciplineAuto, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
            .addComponent(jPanelCategory, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
            .addGroup(jPanelTabAutomaticLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jButtonGenerateAuto)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelTabAutomaticLayout.setVerticalGroup(
            jPanelTabAutomaticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTabAutomaticLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelGoverningBody, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelDisciplineAuto, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonGenerateAuto)
                .addContainerGap(303, Short.MAX_VALUE))
        );

        jTabbedPaneSelect.addTab("Automatic", jPanelTabAutomatic);

        jPanelDisciplineManual.setBorder(javax.swing.BorderFactory.createTitledBorder("Discipline"));
        jPanelDisciplineManual.setPreferredSize(new java.awt.Dimension(99, 111));

        buttonGroupDisciplineManual.add(jRadioDisciplineManual4WayFS);
        jRadioDisciplineManual4WayFS.setSelected(true);
        jRadioDisciplineManual4WayFS.setText("4-Way FS");
        jRadioDisciplineManual4WayFS.setName("FOURWAYFS"); // NOI18N
        jRadioDisciplineManual4WayFS.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                jRadioDisciplineManualItemStateChanged(evt);
            }
        });

        buttonGroupDisciplineManual.add(jRadioDisciplineManual8WayFS);
        jRadioDisciplineManual8WayFS.setText("8-Way FS");
        jRadioDisciplineManual8WayFS.setName("EIGHTWAYFS"); // NOI18N
        jRadioDisciplineManual8WayFS.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                jRadioDisciplineManualItemStateChanged(evt);
            }
        });

        buttonGroupDisciplineManual.add(jRadioDisciplineManual4WayVFS);
        jRadioDisciplineManual4WayVFS.setText("4-Way VFS");
        jRadioDisciplineManual4WayVFS.setName("FOURWAYVFS"); // NOI18N
        jRadioDisciplineManual4WayVFS.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                jRadioDisciplineManualItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelDisciplineManualLayout = new javax.swing.GroupLayout(jPanelDisciplineManual);
        jPanelDisciplineManual.setLayout(jPanelDisciplineManualLayout);
        jPanelDisciplineManualLayout.setHorizontalGroup(
            jPanelDisciplineManualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDisciplineManualLayout.createSequentialGroup()
                .addGroup(jPanelDisciplineManualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioDisciplineManual4WayFS)
                    .addComponent(jRadioDisciplineManual4WayVFS)
                    .addComponent(jRadioDisciplineManual8WayFS))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanelDisciplineManualLayout.setVerticalGroup(
            jPanelDisciplineManualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDisciplineManualLayout.createSequentialGroup()
                .addComponent(jRadioDisciplineManual4WayFS)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioDisciplineManual8WayFS)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioDisciplineManual4WayVFS))
        );

        jTextAreaManual.setTabSize(4);
        jTextAreaManual.setMinimumSize(null);
        jScrollPaneManual.setViewportView(jTextAreaManual);

        jButtonManualInputClear.setText("Clear");
        jButtonManualInputClear.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonManualClearActionPerformed(evt);
            }
        });

        jButtonGenerateManual.setText("Generate");
        jButtonGenerateManual.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonGenerateManualActionPerformed(evt);
            }
        });

        jPanelPrepopulate.setBorder(javax.swing.BorderFactory.createTitledBorder("Prepopulate"));

        jComboBoxPrepopulate.setMaximumRowCount(10);
        jComboBoxPrepopulate.setModel(new DefaultComboBoxModel());
        jComboBoxPrepopulate.setFocusCycleRoot(true);
        jComboBoxPrepopulate.setLightWeightPopupEnabled(false);
        jComboBoxPrepopulate.setName(""); // NOI18N
        jComboBoxPrepopulate.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jComboBoxPrepopulateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelPrepopulateLayout = new javax.swing.GroupLayout(jPanelPrepopulate);
        jPanelPrepopulate.setLayout(jPanelPrepopulateLayout);
        jPanelPrepopulateLayout.setHorizontalGroup(
            jPanelPrepopulateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jComboBoxPrepopulate, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanelPrepopulateLayout.setVerticalGroup(
            jPanelPrepopulateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jComboBoxPrepopulate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jComboBoxPrepopulate.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout jPanelTabManualLayout = new javax.swing.GroupLayout(jPanelTabManual);
        jPanelTabManual.setLayout(jPanelTabManualLayout);
        jPanelTabManualLayout.setHorizontalGroup(
            jPanelTabManualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelDisciplineManual, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
            .addComponent(jScrollPaneManual)
            .addGroup(jPanelTabManualLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelTabManualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jButtonManualInputClear)
                    .addComponent(jButtonGenerateManual)
                    .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36))
            .addComponent(jPanelPrepopulate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanelTabManualLayout.setVerticalGroup(
            jPanelTabManualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTabManualLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelDisciplineManual, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelPrepopulate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneManual, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonGenerateManual)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonManualInputClear)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler1, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE))
        );

        jTabbedPaneSelect.addTab("Manual", jPanelTabManual);

        jPanelPictureOutput.setBackground(new java.awt.Color(255, 255, 255));
        jPanelPictureOutput.setLayout(null);
        jScrollPanePictureOutput.setViewportView(jPanelPictureOutput);
        jScrollPanePictureOutput.getVerticalScrollBar().setUnitIncrement(25);

        jTabbedPaneOutput.addTab("Pictures", jScrollPanePictureOutput);

        jTextAreaTextOutput.setColumns(20);
        jTextAreaTextOutput.setRows(5);
        jTabbedPaneOutput.addTab("Text", jTextAreaTextOutput);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jTabbedPaneSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPaneOutput, javax.swing.GroupLayout.DEFAULT_SIZE, 912, Short.MAX_VALUE)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPaneOutput)
                    .addComponent(jTabbedPaneSelect))
                .addContainerGap())
        );

        fileMenu.setText("File");

        jMenuItemPageSetup.setText("Page Setup");
        jMenuItemPageSetup.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemPageSetupActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItemPageSetup);

        jMenuItemPrint.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemPrint.setText("Print");
        jMenuItemPrint.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemPrintActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItemPrint);

        jMenuItemPrintPreview.setText("Print Preview");
        jMenuItemPrintPreview.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemPrintPreviewActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItemPrintPreview);
        fileMenu.add(jSeparator2);

        jMenuItemResetAll.setText("Reset All");
        jMenuItemResetAll.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemResetAllActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItemResetAll);
        fileMenu.add(jSeparator3);

        jMenuItemExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemExitActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItemExit);

        menuBar.add(fileMenu);

        helpMenu.setText("Help");

        jMenuItemAbout.setText("About");
        jMenuItemAbout.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemAboutActionPerformed(evt);
            }
        });
        helpMenu.add(jMenuItemAbout);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 1120, Short.MAX_VALUE)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Configures the default printing attributes.
     */
    protected final void configDefaultPrintServices()
    {
        /*
         * Set the printing defaults
         */
        printReqattrs.add(new JobName("DrawGen", Locale.ENGLISH));
        printReqattrs.add(OrientationRequested.LANDSCAPE);
        if (this.myPrintService.getDefaultAttributeValue(Media.class) != null)
        {
            printReqattrs.add((Media) this.myPrintService.getDefaultAttributeValue(Media.class));
            printReqattrs.add((MediaSizeName) this.myPrintService.getDefaultAttributeValue(Media.class));
//            printReqattrs.add(MediaSizeName.ISO_A4);

            if (this.myPrintService.getDefaultAttributeValue(MediaPrintableArea.class) == null)
            {
                Media[] myAvailableMediaSizes = (Media[]) this.myPrintService.getSupportedAttributeValues(Media.class, myDocFlavor, null);
                String myAvailableMediaSizeStrings[] = new String[myAvailableMediaSizes.length];
                /* Have to subclass MediaSizeName because getStringTable is protected */
                class cMyMediaSizeName extends MediaSizeName
                {
                    cMyMediaSizeName()
                    {
                        super(1);
                    }

                    @Override
                    public String[] getStringTable()
                    {
                        return super.getStringTable();
                    }
                }
                cMyMediaSizeName myMediaSizeName = new cMyMediaSizeName();
                String[] mediaNames = myMediaSizeName.getStringTable();
                for (int i = 0; i < myAvailableMediaSizes.length; i++)
                {
                    System.out.println(mediaNames[myAvailableMediaSizes[i].getValue()]);
                    myAvailableMediaSizeStrings[i] = (mediaNames[myAvailableMediaSizes[i].getValue()]);
                }
                String selectedMediaSize = (String) JOptionPane.showInputDialog(
                        this,
                        "Default print media is not set to a valid size, please select a valid size",
                        "Select media size:",
                        JOptionPane.PLAIN_MESSAGE,
                        null,
                        myAvailableMediaSizeStrings,
                        null);

                if (selectedMediaSize != null)
                {
                    for (Media myAvailableMediaSize : myAvailableMediaSizes)
                    {
                        if (selectedMediaSize.matches(mediaNames[myAvailableMediaSize.getValue()]))
                        {
                            printReqattrs.add((Media) (myAvailableMediaSize));
                            printReqattrs.add((MediaSizeName) (myAvailableMediaSize));
                        }
                    }
                }
            }

            if ((printReqattrs.get(Media.class) != null) && ((MediaSize.getMediaSizeForName((MediaSizeName) printReqattrs.get(Media.class)) != null)))
            {
//                printReqattrs.add((MediaPrintableArea) (this.myPrintService.getDefaultAttributeValue(MediaPrintableArea.class))); /*UNUSED - CANNOT USE WHEN NO DEFAULT (LINUX)*/

                printReqattrs.add(Chromaticity.COLOR);
//                PrinterResolution dpi = (PrinterResolution) myPrintService.getDefaultAttributeValue(PrinterResolution.class); /*UNUSED*/

//                float DefaultPaperWidthPts = MediaSize.getMediaSizeForName((MediaSizeName) printReqattrs.get(Media.class)).getX(MediaSize.INCH) * 72;  //A4 = 595.2756f;
//                float DefaultPaperHeightPts = MediaSize.getMediaSizeForName((MediaSizeName) printReqattrs.get(Media.class)).getY(MediaSize.INCH) * 72;  //A4 = 841.8898f;
                float DefaultPaperWidthMM = MediaSize.getMediaSizeForName((MediaSizeName) printReqattrs.get(Media.class)).getX(MediaSize.MM);  //A4 = 595.2756f;
                float DefaultPaperHeightMM = MediaSize.getMediaSizeForName((MediaSizeName) printReqattrs.get(Media.class)).getY(MediaSize.MM);  //A4 = 841.8898f;
                float margin = 10.0f;

                printReqattrs.add(new MediaPrintableArea(margin, margin, DefaultPaperWidthMM - (margin * 2), DefaultPaperHeightMM - (margin * 2), MediaSize.MM));

                System.out.println(this.myPrintService.getDefaultAttributeValue(Media.class));
                System.out.println("Default: " + this.myPrintService.getName());

            }
            else
            {
                System.out.println("ERROR: MediaPrintableArea.class");
                JOptionPane.showMessageDialog(this, "WARNING: Default print media is not set to a valid size.  Print preview disabled.");
                this.jMenuItemPrintPreview.setEnabled(false);
            }
        }
        else
        {
            System.out.println("ERROR: Media.class.");
        }
    }

    private void jMenuItemAboutActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemAboutActionPerformed
    {//GEN-HEADEREND:event_jMenuItemAboutActionPerformed
        if (aboutBox == null)
        {
            aboutBox = new AboutBox(this, true);
            aboutBox.setLocationRelativeTo(this);
        }
        aboutBox.setVisible(true);
    }//GEN-LAST:event_jMenuItemAboutActionPerformed

    private void jComboBoxZoomActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jComboBoxZoomActionPerformed
    {//GEN-HEADEREND:event_jComboBoxZoomActionPerformed
        JComboBox cb = (JComboBox) evt.getSource();
        this.scalePercent = Integer.parseInt(cb.getSelectedItem().toString().substring(0, cb.getSelectedItem().toString().length() - 1));

        this.activeDraw = new ActiveDraw(this.activeDraw.draw);

        jPanelPictureOutput.repaint();
    }//GEN-LAST:event_jComboBoxZoomActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemExitActionPerformed
    {//GEN-HEADEREND:event_jMenuItemExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jMenuItemResetAllActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemResetAllActionPerformed
    {//GEN-HEADEREND:event_jMenuItemResetAllActionPerformed
        int ans = JOptionPane.showConfirmDialog(this, "Delete all draws and start again?", "Question?", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (ans == JOptionPane.OK_OPTION)
        {
            autoDrawMgr.resetAll();
            manualDrawMgr.resetAll();
        }
    }//GEN-LAST:event_jMenuItemResetAllActionPerformed

    private void jMenuItemPrintPreviewActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemPrintPreviewActionPerformed
    {//GEN-HEADEREND:event_jMenuItemPrintPreviewActionPerformed
        if ((this.activeDraw.draw == null) || (this.activeDraw.draw.getDraw().isEmpty()))
        {
            JOptionPane.showMessageDialog(this, "Nothing to print!");
        }
        else
        {
            PrintPreview pp = new PrintPreview(null, true, this, (java.awt.print.Printable) this.jPanelPictureOutput);
            pp.setLocationRelativeTo(this);
            pp.setVisible(true);
        }
    }//GEN-LAST:event_jMenuItemPrintPreviewActionPerformed

    private void jMenuItemPrintActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemPrintActionPerformed
    {//GEN-HEADEREND:event_jMenuItemPrintActionPerformed
        if ((this.activeDraw.draw == null) || (this.activeDraw.draw.getDraw().isEmpty()))
        {
            JOptionPane.showMessageDialog(this, "Nothing to print!");
        }
        else
        {
            /*
             * For faster printing turn double buffering off
             */
            RepaintManager.currentManager(this).setDoubleBufferingEnabled(false);

            PrintService[] AllPrtServices = PrintServiceLookup.lookupPrintServices(null, null);

            Doc doc = new SimpleDoc(jPanelPictureOutput, myDocFlavor, null);

            PrintService pSelection = ServiceUI.printDialog(null, 100, 100, AllPrtServices, this.myPrintService, this.myDocFlavor, this.printReqattrs);

            if (pSelection != null)
            {
                DocPrintJob myDocPrintJob = pSelection.createPrintJob();
                try
                {
                    myDocPrintJob.print(doc, this.printReqattrs);
                }
                catch (PrintException e)
                {
                    System.out.println(e);
                }
            }

            /*
             * reenable double buffering
             */
            RepaintManager.currentManager(this).setDoubleBufferingEnabled(true);
        }
    }//GEN-LAST:event_jMenuItemPrintActionPerformed

    private void jMenuItemPageSetupActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemPageSetupActionPerformed
    {//GEN-HEADEREND:event_jMenuItemPageSetupActionPerformed
        java.awt.print.PrinterJob.getPrinterJob().pageDialog(this.printReqattrs);
    }//GEN-LAST:event_jMenuItemPageSetupActionPerformed

    private void jRadioDisciplineAutoItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_jRadioDisciplineAutoItemStateChanged
    {//GEN-HEADEREND:event_jRadioDisciplineAutoItemStateChanged
        if (((JRadioButton) evt.getItem()).isSelected())
        {
            autoDrawMgr.activate();
        }
    }//GEN-LAST:event_jRadioDisciplineAutoItemStateChanged

    private void jRadioGovBodyItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_jRadioGovBodyItemStateChanged
    {//GEN-HEADEREND:event_jRadioGovBodyItemStateChanged
        if (((JRadioButton) evt.getItem()).isSelected())
        {
            autoDrawMgr.activate();
        }
    }//GEN-LAST:event_jRadioGovBodyItemStateChanged

    private void jRadioCategoryStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_jRadioCategoryStateChanged
    {//GEN-HEADEREND:event_jRadioCategoryStateChanged
        if (((JRadioButton) evt.getItem()).isSelected())
        {
            autoDrawMgr.activate();
        }
    }//GEN-LAST:event_jRadioCategoryStateChanged

    private void jTabbedPaneSelectStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jTabbedPaneSelectStateChanged
    {//GEN-HEADEREND:event_jTabbedPaneSelectStateChanged
        if (jTabbedPaneSelect.getTitleAt(jTabbedPaneSelect.getSelectedIndex()).matches("Automatic"))
        {
            autoDrawMgr.activate();
        }
        else
        {
            manualDrawMgr.activate();
        }
    }//GEN-LAST:event_jTabbedPaneSelectStateChanged

    private void jComboBoxPrepopulateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jComboBoxPrepopulateActionPerformed
    {//GEN-HEADEREND:event_jComboBoxPrepopulateActionPerformed
        /* We ignore the first element, as this is the null element (nothing selected) */
        if (((JComboBox) evt.getSource()).getSelectedIndex() > 0)
        {
            Draw selectedDraw = (Draw) ((JComboBox) evt.getSource()).getSelectedItem();
            if (selectedDraw != null)
            {
                selectedDraw.generateAll();

                jTextAreaManual.setText(selectedDraw.getDrawText());
            }
        }
        else
        {
            jTextAreaManual.setText("");
        }
    }//GEN-LAST:event_jComboBoxPrepopulateActionPerformed

    private void jButtonGenerateAutoActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonGenerateAutoActionPerformed
    {//GEN-HEADEREND:event_jButtonGenerateAutoActionPerformed
        jPopupMenuGenerateAuto.show((Component) evt.getSource(), 0, jButtonGenerateAuto.getHeight());
    }//GEN-LAST:event_jButtonGenerateAutoActionPerformed

    private void jMenuItemGenerateAutoCurrentActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemGenerateAutoCurrentActionPerformed
    {//GEN-HEADEREND:event_jMenuItemGenerateAutoCurrentActionPerformed
        int OkToDeletePrevious = JOptionPane.OK_OPTION;
        if (activeDraw.draw != null && activeDraw.draw.getDraw().isEmpty() == false)
        {
            OkToDeletePrevious = JOptionPane.showConfirmDialog(this, "Exising draw will be deleted.  OK?", "Question?", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        }

        if (OkToDeletePrevious == JOptionPane.OK_OPTION)
        {
            this.activeDraw.draw.generateRandomised();
            autoDrawMgr.activate();
        }
    }//GEN-LAST:event_jMenuItemGenerateAutoCurrentActionPerformed

    private void jMenuItemGenerateAutoAllNoSubstitutionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemGenerateAutoAllNoSubstitutionActionPerformed
    {//GEN-HEADEREND:event_jMenuItemGenerateAutoAllNoSubstitutionActionPerformed
        int OkToDeletePrevious = JOptionPane.OK_OPTION;
        if (activeDraw.draw != null)
        {
            if (activeDraw.draw.getDraw().isEmpty() == false)
            {
                OkToDeletePrevious = JOptionPane.showConfirmDialog(this, "Exising draw will be deleted.  OK?", "Question?", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            }

            if (OkToDeletePrevious == JOptionPane.OK_OPTION)
            {
                ArrayList<Draw> drawSiblings = autoDrawMgr.getSiblings();
                for (Draw drawSibling : drawSiblings)
                {
                    drawSibling.generateRandomised();
                }

                this.activeDraw.draw.generateRandomised();
                autoDrawMgr.activate();
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Please select a Governing Body, Discipline and Category");
        }
    }//GEN-LAST:event_jMenuItemGenerateAutoAllNoSubstitutionActionPerformed

    private void jMenuItemGenerateAutoAllSubstitutionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemGenerateAutoAllSubstitutionActionPerformed
    {//GEN-HEADEREND:event_jMenuItemGenerateAutoAllSubstitutionActionPerformed
        int OkToDeletePrevious = JOptionPane.OK_OPTION;
        if (activeDraw.draw != null)
        {
            if (activeDraw.draw.getDraw().isEmpty() == false)
            {
                OkToDeletePrevious = JOptionPane.showConfirmDialog(this, "Exising draw will be deleted.  OK?", "Question?", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            }

            if (OkToDeletePrevious == JOptionPane.OK_OPTION)
            {
                ArrayList<Draw> drawSiblings = autoDrawMgr.getSiblings();

                drawSiblings.get(0).generateRandomised();
                for (int i = 1; i < drawSiblings.size(); i++)
                {
                    drawSiblings.get(i).generateRandomisedFromDraw(drawSiblings.get(i - 1));
                }

                autoDrawMgr.activate();
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Please select a Governing Body, Discipline and Category");
        }
    }//GEN-LAST:event_jMenuItemGenerateAutoAllSubstitutionActionPerformed

    private void jButtonGenerateManualActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonGenerateManualActionPerformed
    {//GEN-HEADEREND:event_jButtonGenerateManualActionPerformed
        int OkToDeletePrevious = JOptionPane.OK_OPTION;

        if (activeDraw.draw != null && activeDraw.draw.getDraw().isEmpty() == false)
        {
            OkToDeletePrevious = JOptionPane.showConfirmDialog(this, "Exising draw will be deleted.  OK?", "Question?", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        }

        if (OkToDeletePrevious == JOptionPane.OK_OPTION)
        {
            activeDraw = new ActiveDraw(manualDrawMgr.getSelectedDraw());
            manualDrawMgr.resetActive();
            ArrayList<Formation> selectedDivePool = activeDraw.draw.getDivePool();

            if (buttonGroupDisciplineManual.getSelection() != null)
            {
                String ManualString = jTextAreaManual.getText();
                if (!ManualString.isEmpty())
                {
                    String[] StringLines = ManualString.split("\n");
                    for (int RoundCount = 0; RoundCount < StringLines.length; RoundCount++)
                    {
                        StringLines[RoundCount] = StringLines[RoundCount].toUpperCase();
                        String[] roundFormations = StringLines[RoundCount].split("[^a-zA-Z0-9]+");
                        ArrayList<Formation> validRoundFormations = new ArrayList<>();

                        Boolean isValidFormation = false;
                        for (String roundFormation : roundFormations)
                        {
                            for (Formation selectedDivePoolFormation : selectedDivePool)
                            {
                                if (selectedDivePoolFormation.index.equals(String.valueOf(roundFormation)))
                                {
                                    validRoundFormations.add(selectedDivePoolFormation);
                                    isValidFormation = true;
                                    break;
                                }
                            }
                            if (isValidFormation == false)
                            {
                                JOptionPane.showMessageDialog(this, roundFormation + " is not a valid formation for this discipline.");
                            }
                        }
                        activeDraw.draw.addRound(new Round(validRoundFormations));
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "Please type/ preselect your rounds.");
                }
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Please select a discipline");
            }

            manualDrawMgr.activate();
        }
    }//GEN-LAST:event_jButtonGenerateManualActionPerformed

    private void jButtonManualClearActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonManualClearActionPerformed
    {//GEN-HEADEREND:event_jButtonManualClearActionPerformed
        int ans = JOptionPane.showConfirmDialog(this, "Delete draw and start again?", "Question?", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (ans == JOptionPane.OK_OPTION)
        {
            jTextAreaManual.setText("");
            this.manualDrawMgr.resetActive();
        }
    }//GEN-LAST:event_jButtonManualClearActionPerformed

    private void jRadioDisciplineManualItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioDisciplineManualItemStateChanged
        if (((JRadioButton) evt.getItem()).isSelected())
        {
            manualDrawMgr.activate();
        }
    }//GEN-LAST:event_jRadioDisciplineManualItemStateChanged

    public PrintRequestAttributeSet getPrintattrs()
    {
        return this.printReqattrs;
    }

    public PrintService getMyPrintService()
    {
        return this.myPrintService;
    }

    public void setMyPrintService(PrintService myNewPrintService)
    {
        this.myPrintService = myNewPrintService;
    }

    public void callPageSetupAction()
    {
        jMenuItemPageSetupActionPerformed(null);
    }

    public void callPrintAction()
    {
        jMenuItemPrintActionPerformed(null);
    }

    /**
     * An overridden JTextArea that is used for the manual text entry. Needs to be overridden as we add another
     * documentListener for user-entered text, but we don't want the Listener to fire when we programatically add
     * to the textarea.
     */
    private class TextAreaManual extends JTextArea
    {
        ManualTextFieldDocumentListener manualTextFieldDocumentListener = new ManualTextFieldDocumentListener();

        TextAreaManual()
        {
            this.getDocument().addDocumentListener(manualTextFieldDocumentListener);
        }

        /* When we're setting the text programatically, we don't want to fire our documentlisteners, or we'll get stuck in a loop. */
        public void setText(String newText)
        {
            this.getDocument().removeDocumentListener(manualTextFieldDocumentListener);
            super.setText(newText);
            this.getDocument().addDocumentListener(manualTextFieldDocumentListener);
        }

        /**
         * The DocumentListener - all events fire the same function.
         */
        class ManualTextFieldDocumentListener implements DocumentListener
        {
            public void insertUpdate(DocumentEvent e)
            {
                this._change(e);
            }

            public void removeUpdate(DocumentEvent e)
            {
                this._change(e);
            }

            public void changedUpdate(DocumentEvent e)
            {
                this._change(e);
            }

            private void _change(DocumentEvent e)
            {
                manualDrawMgr.resetActive();
            }
        }
    }


    /*
     * Allow popup to be wider than combobox
     * http://bugs.java.com/bugdatabase/view_bug.do?bug_id=4880218
     */
    private class StyledComboBoxUI extends BasicComboBoxUI
    {
        protected ComboPopup createPopup()
        {
            BasicComboPopup exPopup = new BasicComboPopup(comboBox)
            {
                protected Rectangle computePopupBounds(int px, int py, int pw, int ph)
                {
                    return super.computePopupBounds(px, py, Math.max(comboBox.getPreferredSize().width, pw), ph);
                }
            };
            exPopup.getAccessibleContext().setAccessibleParent(comboBox);
            return exPopup;
        }
    }

    /**
     * Represents properties of the currently active Draw - the one displayed to the user.
     *
     * In particular, it keeps a BufferedImage of this active Draw, which will be deleted and
     * rebuilt every time the user changes the active draw. This doesn't take a noticeable
     * time to do, and saves a lot of memory.
     */
    private class ActiveDraw
    {
        public Draw draw = null;
        
        public BufferedImage img()
        {
            if (this.draw != null)
            {
                return (this.draw.getScaledImg(scalePercent));
            }
            else
            {
                return null;
            }
        }

        public ActiveDraw(Draw draw)
        {
            this.draw = draw;
        }
    }

    /**
     * The base class draw 'type' manager. An interface and inherited property store for the different
     * 'types' of draw manager - Manual (ManualDrawMgr) and Automatic (AutoDrawMgr).
     *
     * @see ManualDrawMgr
     * @see AutoDrawMgr
     */
    private abstract class DrawTypeMgr
    {
        public final DrawHieararchy drawType = new DrawHieararchy();

        /**
         * Iterates all the Draws contained in the derived object, and resets them via initialiseDraw.
         *
         * @see Draw.initialiseDraw
         */
        public abstract void resetAll();

        /**
         * Called when the user selects a radio button, switches between the manual/automatic tab, or generates a draw.
         *
         * Causes the selected radios to be parsed and used to index a Draw from the DrawHierarchy,
         * which is then loaded and displayed (via paintSelectedDraw).
         *
         * @see paintSelectedDraw
         * @see DrawHierarchy
         */
        public abstract void activate();

        /**
         * Paints the active draw into the jPanels.
         */
        public void paintSelectedDraw()
        {
            /* Repaint the jpanel containing the pictures */
            jPanelPictureOutput.repaint();

            /* Repaint the jpanel containing the text */
            if (activeDraw.draw != null)
            {
                jTextAreaTextOutput.setText(activeDraw.draw.getDrawName() + ":\n\n");

                if (activeDraw.draw.getDraw().size() > 0)
                {
                    String[] drawLines = activeDraw.draw.getDrawText().split("\n");
                    for (int i = 0; i < drawLines.length; i++)
                    {
                        jTextAreaTextOutput.append("Round " + (i + 1) + ":  " + drawLines[i] + "\n");
                    }
                }
            }
            else
            {
                jTextAreaTextOutput.setText("");
            }
        }
    }

    /**
     * The draw type manager for manual draws.
     */
    private class ManualDrawMgr extends DrawTypeMgr
    {
        private final LinkedHashMap<String, Draw> disciplineDrawHash = new LinkedHashMap<>();

        public ManualDrawMgr()
        {
            this.disciplineDrawHash.put("FOURWAYFS", new Draw4WayFS("Custom 4 Way FS", 0, 0, new int[0], new String[0]));
            this.disciplineDrawHash.put("FOURWAYVFS", new Draw4WayVFS("Custom 4 Way VFS", 0, 0, new int[0], new String[0]));
            this.disciplineDrawHash.put("EIGHTWAYFS", new Draw8WayFS("Custom 8 Way FS", 0, 0, new int[0], new String[0]));
        }

        /**
         * Resets the currently active draw via initialiseDraw. Useful for manual draws, less so for automatic.
         *
         * @see Draw.initialiseDraw
         */
        public void resetActive()
        {
            String selectedDiscipline = getSelectedButtonName(buttonGroupDisciplineManual);
            if (selectedDiscipline != null)
            {
                this.disciplineDrawHash.get(selectedDiscipline).initialiseDraw();
            }
            this.paintSelectedDraw();
        }

        public void resetAll()
        {
            for (String aCategoryKey : this.disciplineDrawHash.keySet())
            {
                this.disciplineDrawHash.get(aCategoryKey).initialiseDraw();
            }
            this.paintSelectedDraw();
        }

        /*
         * Get the raw Draw object that is selected by the user's choice of radio buttons.
         *
         * It is useful to have this separate from the activate() function, because we sometimes want
         * to get the draw selected by the user without displaying it (because for manual draws, we
         * prepopulate the manual text field using Draw objects).
         */
        public Draw getSelectedDraw()
        {
            Draw selectedDraw = null;

            if (buttonGroupDisciplineManual != null)
            {
                selectedDraw = this.disciplineDrawHash.get(getSelectedButtonName(buttonGroupDisciplineManual));
            }
            return selectedDraw;
        }

        public void activate()
        {
            activeDraw = new ActiveDraw(this.getSelectedDraw());

            /* Populate the combobox with each discipline from each GovBody. */
            DefaultComboBoxModel prepopulateComboBoxModel = (DefaultComboBoxModel) jComboBoxPrepopulate.getModel();
            prepopulateComboBoxModel.removeAllElements();
            prepopulateComboBoxModel.addElement("---");

            LinkedHashMap<String, GovBody> govBodyHash = manualDrawMgr.drawType.getGovBodyHash();
            for (String aGovBodyKey : govBodyHash.keySet())
            {
                Discipline disc = govBodyHash.get(aGovBodyKey).getDiscipline(getSelectedButtonName(buttonGroupDisciplineManual));

                LinkedHashMap<String, Category> categoryHash = disc.getCategoryHash();
                for (String aCategoryKey : categoryHash.keySet())
                {
                    prepopulateComboBoxModel.addElement(categoryHash.get(aCategoryKey).getDraw());
                }
            }

            jComboBoxPrepopulate.setSelectedIndex(0);

            /* Paint the draw. */
            this.paintSelectedDraw();
            if (!activeDraw.draw.getDrawText().equals(jTextAreaManual.getText()))
            {
                jTextAreaManual.setText(activeDraw.draw.getDrawText());
            }
        }
    }

    /**
     * The draw type manager for automatic draws.
     */
    private class AutoDrawMgr extends DrawTypeMgr
    {
        public void resetAll()
        {
            this.drawType.empty();

            this.paintSelectedDraw();
        }

        /**
         * Returns, in the original order (hence LinkedHashMap), which should be in seniority, all the categories for this discipline.
         */
        public ArrayList<Draw> getSiblings()
        {
            ArrayList<Draw> drawSiblings = new ArrayList<>();
            LinkedHashMap<String, Category> categoryHash = this.drawType.getGovBody(getSelectedButtonName(buttonGroupGoverningBody)).getDiscipline(getSelectedButtonName(buttonGroupDisciplineAuto)).getCategoryHash();

            for (String aCategoryKey : categoryHash.keySet())
            {
                drawSiblings.add(categoryHash.get(aCategoryKey).getDraw());
            }
            return drawSiblings;
        }

        public void activate()
        {
            activeDraw = new ActiveDraw(null);

            if (buttonGroupGoverningBody != null && buttonGroupDisciplineAuto != null)
            {
                String selectedGovBody = getSelectedButtonName(buttonGroupGoverningBody);
                String selectedDiscipline = getSelectedButtonName(buttonGroupDisciplineAuto);
                String selectedCategory = null;

                CardLayout cl = (CardLayout) (jPanelCategory.getLayout());
                if (selectedDiscipline != null && selectedGovBody != null)
                {
                    switch (selectedGovBody)
                    {
                        case "BPA":
                        {
                            jPanelCategory.setVisible(true);

                            switch (selectedDiscipline)
                            {
                                case "FOURWAYFS":
                                {
                                    cl.show(jPanelCategory, (String) jPanelBPA4WayFS.getName());
                                    selectedCategory = getSelectedButtonName(buttonGroupCategoryBPA4WayFS);
                                    if (selectedCategory != null)
                                    {
                                        activeDraw = new ActiveDraw(this.drawType.getGovBody(selectedGovBody).getDiscipline(selectedDiscipline).getCategory(selectedCategory).getDraw());
                                    }
                                    break;
                                }
                                case "EIGHTWAYFS":
                                {
                                    cl.show(jPanelCategory, (String) jPanelBPA8WayFS.getName());
                                    selectedCategory = getSelectedButtonName(buttonGroupCategoryBPA8WayFS);
                                    if (selectedCategory != null)
                                    {
                                        activeDraw = new ActiveDraw(this.drawType.getGovBody(selectedGovBody).getDiscipline(selectedDiscipline).getCategory(selectedCategory).getDraw());
                                    }
                                    break;
                                }
                                case "FOURWAYVFS":
                                {
                                    jPanelCategory.setVisible(false);
                                    activeDraw = new ActiveDraw(this.drawType.getGovBody(selectedGovBody).getDiscipline(selectedDiscipline).getCategory("OPEN").getDraw());
                                    break;
                                }
                            }
                            break;
                        }
                        case "USPA":
                        {
                            jPanelCategory.setVisible(true);

                            switch (selectedDiscipline)
                            {
                                case "FOURWAYFS":
                                {
                                    cl.show(jPanelCategory, (String) jPanelUSPA4WayFS.getName());
                                    selectedCategory = getSelectedButtonName(buttonGroupCategoryUSPA4WayFS);
                                    if (selectedCategory != null)
                                    {
                                        activeDraw = new ActiveDraw(this.drawType.getGovBody(selectedGovBody).getDiscipline(selectedDiscipline).getCategory(selectedCategory).getDraw());
                                    }
                                    break;
                                }
                                case "EIGHTWAYFS":
                                {
                                    cl.show(jPanelCategory, (String) jPanelUSPA8WayFS.getName());
                                    selectedCategory = getSelectedButtonName(buttonGroupCategoryUSPA8WayFS);
                                    if (selectedCategory != null)
                                    {
                                        activeDraw = new ActiveDraw(this.drawType.getGovBody(selectedGovBody).getDiscipline(selectedDiscipline).getCategory(selectedCategory).getDraw());
                                    }
                                    break;
                                }
                                case "FOURWAYVFS":
                                {
                                    cl.show(jPanelCategory, (String) jPanelUSPAVFS.getName());
                                    selectedCategory = getSelectedButtonName(buttonGroupCategoryUSPA4WayVFS);
                                    if (selectedCategory != null)
                                    {
                                        activeDraw = new ActiveDraw(this.drawType.getGovBody(selectedGovBody).getDiscipline(selectedDiscipline).getCategory(selectedCategory).getDraw());
                                    }
                                    break;
                                }
                            }
                            break;
                        }
                        case "IPC":
                        {
                            jPanelCategory.setVisible(false);
                            switch (selectedDiscipline)
                            {
                                case "FOURWAYFS":
                                {
                                    activeDraw = new ActiveDraw(this.drawType.getGovBody(selectedGovBody).getDiscipline(selectedDiscipline).getCategory("OPEN").getDraw());
                                    break;
                                }
                                case "EIGHTWAYFS":
                                {
                                    activeDraw = new ActiveDraw(this.drawType.getGovBody(selectedGovBody).getDiscipline(selectedDiscipline).getCategory("OPEN").getDraw());
                                    break;
                                }
                                case "FOURWAYVFS":
                                {
                                    activeDraw = new ActiveDraw(this.drawType.getGovBody(selectedGovBody).getDiscipline(selectedDiscipline).getCategory("OPEN").getDraw());
                                    break;
                                }
                            }
                        }
                    }
                }
            }

            this.paintSelectedDraw();
        }
    }

    /**
     * A utility function that gets the Name of the selected button in a buttonGroup.
     */
    private String getSelectedButtonName(ButtonGroup buttonGroup)
    {
        for (Enumeration<AbstractButton> buttons = buttonGroup.getElements(); buttons.hasMoreElements();)
        {
            AbstractButton button = buttons.nextElement();

            if (button.isSelected())
            {
                return button.getName();
            }
        }

        return null;
    }

    /**
     * This is used instead of the default picture panel, as we need to perform very specific drawing and printing tasks to it.
     */
    private class cjPanelPictureOutput extends javax.swing.JPanel implements java.awt.print.Printable
    {
        public static final long serialVersionUID = 1L;

        @Override
        public void paintComponent(Graphics g)
        {
            super.paintComponent(g);

            int PageMargin = 15;

            BufferedImage activeDrawImg = activeDraw.img();
            if ((activeDraw.draw != null) && (activeDrawImg != null))
            {
                g.translate(PageMargin, PageMargin);
                g.setColor(java.awt.Color.WHITE);

                g.drawImage(activeDrawImg, 0, 0, null);

                this.setPreferredSize(new java.awt.Dimension(activeDrawImg.getWidth() + PageMargin * 2, activeDrawImg.getHeight() + PageMargin * 2));
            }
            this.revalidate();
        }

        @Override
        public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException
        {
            Graphics2D g2d = (Graphics2D) graphics;
            java.awt.GraphicsConfiguration gc = g2d.getDeviceConfiguration();
            if (gc.getBounds().getHeight() == 0)
            {
                /*
                 * This is a dummy Graphics object, designed to test
                 * the water for the real printing. Send it an image so that the
                 * printing subsystem knows that an image will be produced
                 */
 /*
                 * See http://docstore.mik.ua/orelly/java-ent/jfc/ch05_02.htm
                 * and http://www.neooffice.org/doc/practical_java_hacks.html
                 */
                activeDraw.draw.getDraw().get(0).DrawRound(g2d, 0, 0, 1);
                System.out.println("gc.getBounds().getHeight() == 0");
                return NO_SUCH_PAGE;
            }
            else
            {
                AffineTransform CurAffineTx = gc.getDefaultTransform();

                int TitleSpace = 50;    //pixels
                double xDevicePixelsPerPoint = CurAffineTx.getScaleX();
                double yDevicePixelsPerPoint = CurAffineTx.getScaleY();
                double ImageableHeightDevPx, ImageableWidthDevPx;

//                gc.getBounds().getHeight();     //Height in device pixels
//                pageFormat.getPaper().getHeight();
//                pageFormat.getHeight();         //Height, in 1/72nds of an inch (points), adjusted for orientation
                ImageableHeightDevPx = (pageFormat.getImageableHeight() - TitleSpace-20) * yDevicePixelsPerPoint;
                ImageableWidthDevPx = pageFormat.getImageableWidth() * xDevicePixelsPerPoint;

                g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());

                if (activeDraw.draw != null)
                {
                    int MaxRoundHeightPx = activeDraw.draw.getMaxRoundHeightPx() - TitleSpace-20;
                    int TotalDrawWidthPx = activeDraw.draw.getTotalDrawWidthPx();
                    double MaxRoundWidthDevPx = xDevicePixelsPerPoint * 91;     // Approx 32mm (32*72/25.4) Chosen so that all rookie rounds fit on one page.
                    double MinRoundWidthDevPx = xDevicePixelsPerPoint * 57;     // Approx 20mm (35*72/25.4)

                    int xPos = 0, yPos = 0;
                    int RoundCount = 0;
                    double Dev2ImgPixelRatio;    // The ratio of device pixels to image pixels

                    double xPx2PtScaleFactor, yPx2PtScaleFactor;    // The scaling factor to convert device pixels to points (as used by Graphics)

                    /* If when we use the full height of the page, the width is less than our minimum, then we'll only use one page */
                    if (activeDraw.draw.getDraw().get(0).GetRoundWidthPx() * (ImageableHeightDevPx / MaxRoundHeightPx) < MinRoundWidthDevPx)
                    {
                        Dev2ImgPixelRatio = ImageableHeightDevPx / MaxRoundHeightPx;
                    }
                    /* If when we use the full height of the page, the width is greater than our maximum, we have to set the scale to use the maximum */
                    else
                    {
                        if (activeDraw.draw.getDraw().get(0).GetRoundWidthPx() * (ImageableHeightDevPx / MaxRoundHeightPx) >= MaxRoundWidthDevPx)
                        {
                            Dev2ImgPixelRatio = MaxRoundWidthDevPx / activeDraw.draw.getDraw().get(0).GetRoundWidthPx();
                        }
                        else
                        {
                            Dev2ImgPixelRatio = ImageableHeightDevPx / MaxRoundHeightPx;
                        }
                    }

                    xPx2PtScaleFactor = xDevicePixelsPerPoint / Dev2ImgPixelRatio;
                    yPx2PtScaleFactor = yDevicePixelsPerPoint / Dev2ImgPixelRatio;

                    g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
                    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                    g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);
                    g2d.setRenderingHint(RenderingHints.KEY_DITHERING, RenderingHints.VALUE_DITHER_ENABLE);
                    g2d.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);
                    g2d.scale(1 / xPx2PtScaleFactor, 1 / yPx2PtScaleFactor);

                    int WidthCount = 0;
                    int SkipWidth = (int) (pageIndex * ImageableWidthDevPx / Dev2ImgPixelRatio);

                    /* Skip preceding pages */
                    while ((WidthCount < SkipWidth) && (RoundCount < activeDraw.draw.getDraw().size()))
                    {
                        Round RoundElem = activeDraw.draw.getDraw().get(RoundCount);
                        int NextXIncrement = (RoundCount + 1 == activeDraw.draw.getDraw().size() ? RoundElem.GetRoundWidthPx() : RoundElem.GetRoundWidthPx() + Draw.ROUNDSPACING);

                        WidthCount += NextXIncrement;
                        if (WidthCount <= SkipWidth)
                        {
                            RoundCount++;
                        }
                    }

                    /* Initialise the vertical position of the rounds */
                    yPos += TitleSpace;

                    /* Draw a box to debug printing issues */
                    // g2d.draw3DRect(0, 0, (int)(pageFormat.getImageableWidth() * xPx2PtScaleFactor), (int)(pageFormat.getImageableHeight() *xPx2PtScaleFactor), false);
                    if (RoundCount == activeDraw.draw.getDraw().size())
                    {
                        return NO_SUCH_PAGE;
                    }
                    else
                    {
                        /* Now we perform our rendering */

//                        /* Set the draw name */
//                        Font currentFont = g2d.getFont();
//                        System.out.println("currentFont.getSize()" + currentFont.getSize2D());
//                        Font drawTitleFont = currentFont.deriveFont((float) (currentFont.getSize2D() * yPx2PtScaleFactor));
//                        g2d.setFont(drawTitleFont);
                        g2d.setFont(g2d.getFont().deriveFont((float) (35.0)));
                        g2d.drawString(activeDraw.draw.getDrawName(), 0, yPos);
                        yPos += (15 * yPx2PtScaleFactor);

                        for (; RoundCount < activeDraw.draw.getDraw().size(); RoundCount++)
                        {
                            Round RoundElem = activeDraw.draw.getDraw().get(RoundCount);
                            int NextXIncrement = (RoundCount + 1 == activeDraw.draw.getDraw().size() ? RoundElem.GetRoundWidthPx() : RoundElem.GetRoundWidthPx() + Draw.ROUNDSPACING);

                            if (xPos + NextXIncrement > ImageableWidthDevPx / Dev2ImgPixelRatio)
                            {
                                break;
                            }

                            g2d.setFont(g2d.getFont().deriveFont((float) (20.0)));
                            g2d.drawString("Round " + (RoundCount + 1), xPos, yPos - 3);

                            RoundElem.DrawRound(g2d, xPos, yPos, 1.0);
                            xPos += RoundElem.GetRoundWidthPx() + Draw.ROUNDSPACING;
                        }

                        g2d.setFont(g2d.getFont().deriveFont((float) (20.0)));
                        String VerStr = ResourceBundle.getBundle("DrawGen/resources/DrawGen").getString("Application.version");
//                        TODO
//                        g2d.drawString("DrawGen v" + VerStr + " - by Dougal Seeley", 0, (int) ((pageFormat.getImageableHeight() * yPx2PtScaleFactor)) + g2d.getFontMetrics().getHeight());
                        g2d.drawString("DrawGen v" + VerStr + " - by Dougal Seeley", 0, (int) ((pageFormat.getImageableHeight() - 3) * yPx2PtScaleFactor));

                        /* tell the caller that this page is part of the printed document */
                        return PAGE_EXISTS;
                    }
                }
                else
                {
                    return NO_SUCH_PAGE;
                }
            }
        }
    }

    /**
     * Entry point
     *
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the System look and feel */
        try
        {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        }
        catch (Exception ex)
        {
            System.out.println(ex);
        }

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new DrawGen().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupCategoryBPA4WayFS;
    private javax.swing.ButtonGroup buttonGroupCategoryBPA4WayVFS;
    private javax.swing.ButtonGroup buttonGroupCategoryBPA8WayFS;
    private javax.swing.ButtonGroup buttonGroupCategoryUSPA4WayFS;
    private javax.swing.ButtonGroup buttonGroupCategoryUSPA4WayVFS;
    private javax.swing.ButtonGroup buttonGroupCategoryUSPA8WayFS;
    private javax.swing.ButtonGroup buttonGroupDisciplineAuto;
    private javax.swing.ButtonGroup buttonGroupDisciplineManual;
    private javax.swing.ButtonGroup buttonGroupGoverningBody;
    private javax.swing.JMenu fileMenu;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButtonGenerateAuto;
    private javax.swing.JButton jButtonGenerateManual;
    private javax.swing.JButton jButtonManualInputClear;
    private javax.swing.JComboBox<String> jComboBoxPrepopulate;
    private javax.swing.JComboBox jComboBoxZoom;
    private javax.swing.JLabel jLabelZoom;
    private javax.swing.JMenuItem jMenuItemAbout;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemGenerateAutoAllNoSubstitution;
    private javax.swing.JMenuItem jMenuItemGenerateAutoAllSubstitution;
    private javax.swing.JMenuItem jMenuItemGenerateAutoCurrent;
    private javax.swing.JMenuItem jMenuItemPageSetup;
    private javax.swing.JMenuItem jMenuItemPrint;
    private javax.swing.JMenuItem jMenuItemPrintPreview;
    private javax.swing.JMenuItem jMenuItemResetAll;
    private javax.swing.JPanel jPanelBPA4WayFS;
    private javax.swing.JPanel jPanelBPA4WayVFS;
    private javax.swing.JPanel jPanelBPA8WayFS;
    private javax.swing.JPanel jPanelCategory;
    private javax.swing.JPanel jPanelDisciplineAuto;
    private javax.swing.JPanel jPanelDisciplineManual;
    private javax.swing.JPanel jPanelGoverningBody;
    private javax.swing.JPanel jPanelPictureOutput;
    private javax.swing.JPanel jPanelPrepopulate;
    private javax.swing.JPanel jPanelTabAutomatic;
    private javax.swing.JPanel jPanelTabManual;
    private javax.swing.JPanel jPanelUSPA4WayFS;
    private javax.swing.JPanel jPanelUSPA8WayFS;
    private javax.swing.JPanel jPanelUSPAVFS;
    private javax.swing.JPopupMenu jPopupMenuGenerateAuto;
    private javax.swing.JRadioButton jRadioBPA4WayFSA;
    private javax.swing.JRadioButton jRadioBPA4WayFSAA;
    private javax.swing.JRadioButton jRadioBPA4WayFSAAA;
    private javax.swing.JRadioButton jRadioBPA4WayFSRookies;
    private javax.swing.JRadioButton jRadioBPA4WayVFSOpen;
    private javax.swing.JRadioButton jRadioBPA8WayFSIntermediate;
    private javax.swing.JRadioButton jRadioBPA8WayFSSenior;
    private javax.swing.JRadioButton jRadioDisciplineAuto4WayFS;
    private javax.swing.JRadioButton jRadioDisciplineAuto4WayVFS;
    private javax.swing.JRadioButton jRadioDisciplineAuto8WayFS;
    private javax.swing.JRadioButton jRadioDisciplineManual4WayFS;
    private javax.swing.JRadioButton jRadioDisciplineManual4WayVFS;
    private javax.swing.JRadioButton jRadioDisciplineManual8WayFS;
    private javax.swing.JRadioButton jRadioGovBodyBPA;
    private javax.swing.JRadioButton jRadioGovBodyIPC;
    private javax.swing.JRadioButton jRadioGovBodyUSPA;
    private javax.swing.JRadioButton jRadioUSPA4WayFSAdvanced;
    private javax.swing.JRadioButton jRadioUSPA4WayFSIntermediate;
    private javax.swing.JRadioButton jRadioUSPA4WayFSOpen;
    private javax.swing.JRadioButton jRadioUSPA4WayVFSAdvanced;
    private javax.swing.JRadioButton jRadioUSPA4WayVFSOpen;
    private javax.swing.JRadioButton jRadioUSPA8WayFSIntermediate;
    private javax.swing.JRadioButton jRadioUSPA8WayFSOpen;
    private javax.swing.JScrollPane jScrollPaneManual;
    private javax.swing.JScrollPane jScrollPanePictureOutput;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JTabbedPane jTabbedPaneOutput;
    private javax.swing.JTabbedPane jTabbedPaneSelect;
    private javax.swing.JTextArea jTextAreaManual;
    private javax.swing.JTextArea jTextAreaTextOutput;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables
    private JDialog aboutBox;
}
